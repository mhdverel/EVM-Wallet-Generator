print("""
üöÄ Welcome to EVM Wallet Generator! üöÄ

 ‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà   ‚ñÑ‚ñà‚ñà‚ñà‚ñà 
‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ ‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ  ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà  ‚ñà‚ñà‚ñí ‚ñÄ‚ñà‚ñí
‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí‚ñí‚ñà‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë
‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñí‚ñí‚ñì‚ñà  ‚ñÑ  ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë‚ñí‚ñì‚ñà  ‚ñÑ ‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí‚ñë‚ñì‚ñà  ‚ñà‚ñà‚ñì
‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí
‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñí ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñë   ‚ñí ‚ñí  ‚ñë‚ñí   ‚ñí 
‚ñë‚ñí ‚ñë      ‚ñë ‚ñë  ‚ñë‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë  ‚ñë ‚ñë  ‚ñë‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë  ‚ñë   ‚ñë 
‚ñë‚ñë          ‚ñë   ‚ñí ‚ñí ‚ñë‚ñë     ‚ñë      ‚ñë   ‚ñë ‚ñë ‚ñë ‚ñë   ‚ñë 
            ‚ñë  ‚ñë‚ñë ‚ñë        ‚ñë  ‚ñë         ‚ñë       ‚ñë 
                ‚ñë ‚ñë                                

        github.com/mhdverel
""")

from eth_account import Account
from mnemonic import Mnemonic
import os

# Enable HD Wallet features
Account.enable_unaudited_hdwallet_features()

def generate_wallet():
    # Generate Mnemonic Phrase
    mnemo = Mnemonic("english")
    seed_phrase = mnemo.generate(strength=256)
    
    # Generate Account from Mnemonic
    acct = Account.from_mnemonic(seed_phrase)
    private_key = acct.key.hex()
    public_address = acct.address
    
    return seed_phrase, private_key, public_address

def save_to_file(filename, data):
    with open(filename, "a") as f:  # Append mode to keep all wallets in one file
        f.write(data + "\n")
    os.chmod(filename, 0o600)  # Set file permissions to read/write owner only

def main():
    print("\nüöÄ Welcome to EVM Wallet Generator! üöÄ")
    try:
        num_wallets = int(input("üî¢ Enter the number of wallets to generate: "))
        if num_wallets <= 0:
            print("‚ö†Ô∏è Please enter a valid positive number!")
            return
    except ValueError:
        print("‚ùå Invalid input! Please enter a number.")
        return
    
    for i in range(1, num_wallets + 1):
        print(f"\n‚ú® Generating Wallet {i}/{num_wallets}...")
        seed_phrase, private_key, public_address = generate_wallet()
        
        print(f"üìå Wallet Address: {public_address}")
        print("‚úÖ Public address, private key, and seed phrase are saved in separate files.")
        
        # Save to respective files
        save_to_file("address_wallet.txt", public_address)
        save_to_file("private_key.txt", private_key)
        save_to_file("seed_phrase.txt", seed_phrase)
    
    print("\nüéâ Wallet generation completed! üéâ")

if __name__ == "__main__":
    main()
